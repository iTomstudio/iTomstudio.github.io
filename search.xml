<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>k近邻原理</title>
      <link href="/2020/06/06/j-k-jin-lin-yuan-li/"/>
      <url>/2020/06/06/j-k-jin-lin-yuan-li/</url>
      
        <content type="html"><![CDATA[<p>#<a href="https://www.jianshu.com/p/3e1d318b76aa" target="_blank" rel="noopener">返回目录</a></p><hr><h3 id="K近邻原理"><a href="#K近邻原理" class="headerlink" title="K近邻原理"></a><a href="https://www.pkudodo.com/2018/11/19/1-2/" target="_blank" rel="noopener">K近邻原理</a></h3><ul><li>目录<ul><li>模型介绍 </li><li>投票机制</li><li>sklearn实现</li></ul></li></ul><hr><hr><h6 id="模型介绍"><a href="#模型介绍" class="headerlink" title="模型介绍"></a>模型介绍</h6><p><a href="https://scikit-learn.org/stable/modules/neighbors.html#neighbors" target="_blank" rel="noopener">近邻</a><br> <a href="https://scikit-learn.org/stable/modules/generated/sklearn.neighbors.KNeighborsClassifier.html#sklearn.neighbors.KNeighborsClassifier" target="_blank" rel="noopener">K近邻</a></p><blockquote><p>样本分类的另一种方法,从样本属性出发,区别于感知机样本权重乘以权重.</p></blockquote><h6 id="投票机制"><a href="#投票机制" class="headerlink" title="投票机制"></a>投票机制</h6><blockquote><p>顿时想起了poll仰卧起坐的<a href="https://github.com/iTomstudio/predictor_situp" target="_blank" rel="noopener">代码</a></p></blockquote><pre class=" language-python"><code class="language-python">    topKList <span class="token operator">=</span> np<span class="token punctuation">.</span>argsort<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>distList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span>topK<span class="token punctuation">]</span>        <span class="token comment" spellcheck="true">#升序排序</span>    <span class="token comment" spellcheck="true">#建立一个长度时的列表，用于选择数量最多的标记</span>    <span class="token comment" spellcheck="true">#3.2.4提到了分类决策使用的是投票表决，topK个标记每人有一票，在数组中每个标记代表的位置中投入</span>    <span class="token comment" spellcheck="true">#自己对应的地方，随后进行唱票选择最高票的标记</span>    labelList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">10</span>    <span class="token comment" spellcheck="true">#对topK个索引进行遍历</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> topKList<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#trainLabelMat[index]：在训练集标签中寻找topK元素索引对应的标记</span>        <span class="token comment" spellcheck="true">#int(trainLabelMat[index])：将标记转换为int（实际上已经是int了，但是不int的话，报错）</span>        <span class="token comment" spellcheck="true">#labelList[int(trainLabelMat[index])]：找到标记在labelList中对应的位置</span>        <span class="token comment" spellcheck="true">#最后加1，表示投了一票</span>        labelList<span class="token punctuation">[</span>int<span class="token punctuation">(</span>trainLabelMat<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">#max(labelList)：找到选票箱中票数最多的票数值</span>    <span class="token comment" spellcheck="true">#labelList.index(max(labelList))：再根据最大值在列表中找到该值对应的索引，等同于预测的标记</span>    <span class="token keyword">return</span> labelList<span class="token punctuation">.</span>index<span class="token punctuation">(</span>max<span class="token punctuation">(</span>labelList<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h6 id="sklearn实现"><a href="#sklearn实现" class="headerlink" title="sklearn实现"></a>sklearn实现</h6><ul><li><a href="https://scikit-learn.org/stable/auto_examples/exercises/plot_digits_classification_exercise.html#sphx-glr-auto-examples-exercises-plot-digits-classification-exercise-py" target="_blank" rel="noopener">数字分类练习</a></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasets<span class="token punctuation">,</span> neighbors<span class="token punctuation">,</span> linear_modelX_digits<span class="token punctuation">,</span> y_digits <span class="token operator">=</span> datasets<span class="token punctuation">.</span>load_digits<span class="token punctuation">(</span>return_X_y<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>X_digits <span class="token operator">=</span> X_digits <span class="token operator">/</span> X_digits<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span>n_samples <span class="token operator">=</span> len<span class="token punctuation">(</span>X_digits<span class="token punctuation">)</span>X_train <span class="token operator">=</span> X_digits<span class="token punctuation">[</span><span class="token punctuation">:</span>int<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">9</span> <span class="token operator">*</span> n_samples<span class="token punctuation">)</span><span class="token punctuation">]</span>y_train <span class="token operator">=</span> y_digits<span class="token punctuation">[</span><span class="token punctuation">:</span>int<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">9</span> <span class="token operator">*</span> n_samples<span class="token punctuation">)</span><span class="token punctuation">]</span>X_test <span class="token operator">=</span> X_digits<span class="token punctuation">[</span>int<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">9</span> <span class="token operator">*</span> n_samples<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>y_test <span class="token operator">=</span> y_digits<span class="token punctuation">[</span>int<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token number">9</span> <span class="token operator">*</span> n_samples<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span>knn <span class="token operator">=</span> neighbors<span class="token punctuation">.</span>KNeighborsClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>logistic <span class="token operator">=</span> linear_model<span class="token punctuation">.</span>LogisticRegression<span class="token punctuation">(</span>max_iter<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'KNN score: %f'</span> <span class="token operator">%</span> knn<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'LogisticRegression score: %f'</span><span class="token operator">%</span> logistic<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span><span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k近邻 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>逻辑斯蒂模型</title>
      <link href="/2020/06/06/j-luo-ji-si-di-mo-xing/"/>
      <url>/2020/06/06/j-luo-ji-si-di-mo-xing/</url>
      
        <content type="html"><![CDATA[<p>#<a href="https://www.jianshu.com/p/3e1d318b76aa" target="_blank" rel="noopener">返回目录</a></p><hr><h3 id="逻辑斯蒂"><a href="#逻辑斯蒂" class="headerlink" title="逻辑斯蒂"></a><a href="https://www.pkudodo.com/2018/12/03/1-6/" target="_blank" rel="noopener">逻辑斯蒂</a></h3><ul><li>目录<ul><li>模型介绍 </li><li>条件概率模型</li><li>sklearn实现</li></ul></li></ul><hr><hr><h6 id="模型介绍"><a href="#模型介绍" class="headerlink" title="模型介绍"></a>模型介绍</h6><p> <a href="https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression" target="_blank" rel="noopener">逻辑斯蒂</a></p><h6 id="条件概率模型"><a href="#条件概率模型" class="headerlink" title="条件概率模型"></a>条件概率模型</h6><blockquote><p>作用 :<br>1.解决极小距离差别带来的+1和-1的天壤之别<br>2.预测式子可微</p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> 原理</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/19407955-a5628ba9269c2f30.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li><input disabled="" type="checkbox"> 代码<blockquote><p>预测函数,从之前的sign函数结果,变为取概率最大作为预测结果.</p></blockquote></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">predict</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    预测标签    :param w:训练过程中学到的w    :param x: 要预测的样本    :return: 预测结果    '''</span>    <span class="token comment" spellcheck="true">#dot为两个向量的点积操作，计算得到w * x</span>    wx <span class="token operator">=</span> np<span class="token punctuation">.</span>dot<span class="token punctuation">(</span>w<span class="token punctuation">,</span> x<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#计算标签为1的概率</span>    <span class="token comment" spellcheck="true">#该公式参考“6.1.2 二项逻辑斯蒂回归模型”中的式6.5</span>    P1 <span class="token operator">=</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>wx<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span>wx<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#如果为1的概率大于0.5，返回1</span>    <span class="token keyword">if</span> P1 <span class="token operator">>=</span> <span class="token number">0.5</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token comment" spellcheck="true">#否则返回0</span>    <span class="token keyword">return</span> <span class="token number">0</span></code></pre><h6 id="sklearn实现"><a href="#sklearn实现" class="headerlink" title="sklearn实现"></a>sklearn实现</h6><ul><li><a href="https://scikit-learn.org/stable/auto_examples/linear_model/plot_iris_logistic.html#sphx-glr-auto-examples-linear-model-plot-iris-logistic-py" target="_blank" rel="noopener">逻辑斯蒂三分类模型</a></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/19407955-98c354f7c73126d4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token keyword">from</span> sklearn <span class="token keyword">import</span> datasets<span class="token comment" spellcheck="true"># import some data to play with</span>iris <span class="token operator">=</span> datasets<span class="token punctuation">.</span>load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span>X <span class="token operator">=</span> iris<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># we only take the first two features.</span>Y <span class="token operator">=</span> iris<span class="token punctuation">.</span>targetlogreg <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>C<span class="token operator">=</span><span class="token number">1e5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Create an instance of Logistic Regression Classifier and fit the data.</span>logreg<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Plot the decision boundary. For that, we will assign a color to each</span><span class="token comment" spellcheck="true"># point in the mesh [x_min, x_max]x[y_min, y_max].</span>x_min<span class="token punctuation">,</span> x_max <span class="token operator">=</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">.</span><span class="token number">5</span>y_min<span class="token punctuation">,</span> y_max <span class="token operator">=</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">.</span><span class="token number">5</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">.</span><span class="token number">5</span>h <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token number">02</span>  <span class="token comment" spellcheck="true"># step size in the mesh</span>xx<span class="token punctuation">,</span> yy <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>x_min<span class="token punctuation">,</span> x_max<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>y_min<span class="token punctuation">,</span> y_max<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span>Z <span class="token operator">=</span> logreg<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>np<span class="token punctuation">.</span>c_<span class="token punctuation">[</span>xx<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> yy<span class="token punctuation">.</span>ravel<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Put the result into a color plot</span>Z <span class="token operator">=</span> Z<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>xx<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>pcolormesh<span class="token punctuation">(</span>xx<span class="token punctuation">,</span> yy<span class="token punctuation">,</span> Z<span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>Paired<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Plot also the training points</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> X<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token operator">=</span>Y<span class="token punctuation">,</span> edgecolors<span class="token operator">=</span><span class="token string">'k'</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>Paired<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'Sepal length'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'Sepal width'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlim<span class="token punctuation">(</span>xx<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> xx<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylim<span class="token punctuation">(</span>yy<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> yy<span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xticks<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>yticks<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ul><li><a href="https://scikit-learn.org/stable/auto_examples/linear_model/plot_sparse_logistic_regression_mnist.html#sphx-glr-auto-examples-linear-model-plot-sparse-logistic-regression-mnist-py" target="_blank" rel="noopener">MNIST 手写体分类</a>   using multinomial logistic + L1</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/19407955-58eefa8718599a91.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> fetch_openml<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> LogisticRegression<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> StandardScaler<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>utils <span class="token keyword">import</span> check_random_state<span class="token comment" spellcheck="true"># Turn down for faster convergence</span><span class="token comment" spellcheck="true"># 调低样本数可以快速收敛</span>t0 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>train_samples <span class="token operator">=</span> <span class="token number">5000</span><span class="token comment" spellcheck="true"># ================================================</span><span class="token comment" spellcheck="true"># Load data from https://www.openml.org/d/554</span><span class="token comment" spellcheck="true"># 从网站读取数据集,速度取决于你的网速!!!</span>X<span class="token punctuation">,</span> y <span class="token operator">=</span> fetch_openml<span class="token punctuation">(</span><span class="token string">'mnist_784'</span><span class="token punctuation">,</span> version<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> return_X_y<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>random_state <span class="token operator">=</span> check_random_state<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>permutation <span class="token operator">=</span> random_state<span class="token punctuation">.</span>permutation<span class="token punctuation">(</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>X <span class="token operator">=</span> X<span class="token punctuation">[</span>permutation<span class="token punctuation">]</span>y <span class="token operator">=</span> y<span class="token punctuation">[</span>permutation<span class="token punctuation">]</span>X <span class="token operator">=</span> X<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token punctuation">(</span>X<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>X_train<span class="token punctuation">,</span> X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>    X<span class="token punctuation">,</span> y<span class="token punctuation">,</span> train_size<span class="token operator">=</span>train_samples<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">)</span>scaler <span class="token operator">=</span> StandardScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>X_train <span class="token operator">=</span> scaler<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>X_train<span class="token punctuation">)</span>X_test <span class="token operator">=</span> scaler<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>X_test<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Turn up tolerance for faster convergence</span><span class="token comment" spellcheck="true"># 提高 tol 可以快速收敛</span><span class="token comment" spellcheck="true"># tol：停止求解的标准，float类型，默认为1e-4。就是求解到多少的时候，停止，认为已经求出最优解。</span>clf <span class="token operator">=</span> LogisticRegression<span class="token punctuation">(</span>    C<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">.</span> <span class="token operator">/</span> train_samples<span class="token punctuation">,</span> penalty<span class="token operator">=</span><span class="token string">'l1'</span><span class="token punctuation">,</span> solver<span class="token operator">=</span><span class="token string">'saga'</span><span class="token punctuation">,</span> tol<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span>clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span> y_train<span class="token punctuation">)</span>sparsity <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>clf<span class="token punctuation">.</span>coef_ <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>score <span class="token operator">=</span> clf<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span> y_test<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print('Best C % .4f' % clf.C_)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Sparsity with L1 penalty: %.2f%%"</span> <span class="token operator">%</span> sparsity<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Test score with L1 penalty: %.4f"</span> <span class="token operator">%</span> score<span class="token punctuation">)</span>coef <span class="token operator">=</span> clf<span class="token punctuation">.</span>coef_<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>scale <span class="token operator">=</span> np<span class="token punctuation">.</span>abs<span class="token punctuation">(</span>coef<span class="token punctuation">)</span><span class="token punctuation">.</span>max<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    l1_plot <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    l1_plot<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>coef<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span> interpolation<span class="token operator">=</span><span class="token string">'nearest'</span><span class="token punctuation">,</span>                   cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>cm<span class="token punctuation">.</span>RdBu<span class="token punctuation">,</span> vmin<span class="token operator">=</span><span class="token operator">-</span>scale<span class="token punctuation">,</span> vmax<span class="token operator">=</span>scale<span class="token punctuation">)</span>    l1_plot<span class="token punctuation">.</span>set_xticks<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    l1_plot<span class="token punctuation">.</span>set_yticks<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    l1_plot<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">'Class %i'</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>suptitle<span class="token punctuation">(</span><span class="token string">'Classification vector for...'</span><span class="token punctuation">)</span>run_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> t0<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Example run in %.3f s'</span> <span class="token operator">%</span> run_time<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 逻辑斯蒂模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>感知机</title>
      <link href="/2020/06/06/j-xian-xing-fen-lei-mo-xing-gan-zhi-ji/"/>
      <url>/2020/06/06/j-xian-xing-fen-lei-mo-xing-gan-zhi-ji/</url>
      
        <content type="html"><![CDATA[<p>#<a href="https://www.jianshu.com/p/3e1d318b76aa" target="_blank" rel="noopener">返回目录</a></p><hr><h3 id="感知机"><a href="#感知机" class="headerlink" title="感知机"></a><a href="https://www.pkudodo.com/2018/11/18/1-4/" target="_blank" rel="noopener">感知机</a></h3><ul><li>目录<ul><li>模型介绍 </li><li>梯度下降法原理和代码</li><li>sklearn实现</li></ul></li></ul><hr><hr><h6 id="模型介绍"><a href="#模型介绍" class="headerlink" title="模型介绍"></a>模型介绍</h6><p> <a href="https://scikit-learn.org/stable/modules/linear_model.html#perceptron" target="_blank" rel="noopener">感知机</a></p><h6 id="随机梯度下降算法"><a href="#随机梯度下降算法" class="headerlink" title="随机梯度下降算法"></a>随机梯度下降算法</h6><blockquote><p>作用 : 求解 w, b .</p></blockquote><ul><li><input checked="" disabled="" type="checkbox"> 原理</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/19407955-44625a3b15e65174.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li><input disabled="" type="checkbox"> 代码</li></ul><pre class=" language-python"><code class="language-python">  <span class="token comment" spellcheck="true">#进行iter次迭代计算</span>    <span class="token keyword">for</span> k <span class="token keyword">in</span> range<span class="token punctuation">(</span>iter<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#对于每一个样本进行梯度下降</span>        <span class="token comment" spellcheck="true">#李航书中在2.3.1开头部分使用的梯度下降，是全部样本都算一遍以后，统一</span>        <span class="token comment" spellcheck="true">#进行一次梯度下降</span>        <span class="token comment" spellcheck="true">#在2.3.1的后半部分可以看到（例如公式2.6 2.7），求和符号没有了，此时用</span>        <span class="token comment" spellcheck="true">#的是随机梯度下降，即计算一个样本就针对该样本进行一次梯度下降。</span>        <span class="token comment" spellcheck="true">#两者的差异各有千秋，但较为常用的是随机梯度下降。</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true">#获取当前样本的向量</span>            xi <span class="token operator">=</span> dataMat<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">#获取当前样本所对应的标签</span>            yi <span class="token operator">=</span> labelMat<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true">#判断是否是误分类样本</span>            <span class="token comment" spellcheck="true">#误分类样本特诊为： -yi(w*xi+b)>=0，详细可参考书中2.2.2小节</span>            <span class="token comment" spellcheck="true">#在书的公式中写的是>0，实际上如果=0，说明改点在超平面上，也是不正确的</span>            <span class="token keyword">if</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> yi <span class="token operator">*</span> <span class="token punctuation">(</span>w <span class="token operator">*</span> xi<span class="token punctuation">.</span>T <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#对于误分类样本，进行梯度下降，更新w和b</span>                w <span class="token operator">=</span> w <span class="token operator">+</span> h <span class="token operator">*</span>  yi <span class="token operator">*</span> xi                b <span class="token operator">=</span> b <span class="token operator">+</span> h <span class="token operator">*</span> yi        <span class="token comment" spellcheck="true">#打印训练进度</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Round %d:%d training'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>k<span class="token punctuation">,</span> iter<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h6 id="sklearn实现"><a href="#sklearn实现" class="headerlink" title="sklearn实现"></a>sklearn实现</h6><blockquote><p>clf = classifier的缩写</p></blockquote><ul><li><a href="https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.Perceptron.html#sklearn.linear_model.Perceptron" target="_blank" rel="noopener">官方代码</a><br>在页面中间部分,  Examples 部分</li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_digits<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> PerceptronX<span class="token punctuation">,</span> y <span class="token operator">=</span> load_digits<span class="token punctuation">(</span>return_X_y<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>clf <span class="token operator">=</span> Perceptron<span class="token punctuation">(</span>tol<span class="token operator">=</span><span class="token number">1e</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span>a <span class="token operator">=</span> clf<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span></code></pre><ul><li>自写代码<blockquote><p>信息特征数,冗余特征数,参考<a href="https://www.jianshu.com/p/94dbc5d1317e" target="_blank" rel="noopener">矩阵的秩</a></p></blockquote></li></ul><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> make_classification<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>linear_model <span class="token keyword">import</span> Perceptron<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npn_samples <span class="token operator">=</span> <span class="token number">1000</span>n_features <span class="token operator">=</span> <span class="token number">2</span>random_state <span class="token operator">=</span> <span class="token number">0</span>x<span class="token punctuation">,</span>y <span class="token operator">=</span> make_classification<span class="token punctuation">(</span>n_samples<span class="token operator">=</span>n_samples<span class="token punctuation">,</span> n_features<span class="token operator">=</span>n_features<span class="token punctuation">,</span>                                                    n_redundant<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>n_informative<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>n_clusters_per_class<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>                                                     random_state<span class="token operator">=</span>random_state<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#n_samples:生成样本的数量</span><span class="token comment" spellcheck="true">#n_features=2:生成样本的特征数，特征数=n_informative（） + n_redundant + n_repeated</span><span class="token comment" spellcheck="true">#n_informative：多信息特征的个数</span><span class="token comment" spellcheck="true">#n_redundant：冗余信息，informative特征的随机线性组合</span><span class="token comment" spellcheck="true">#n_clusters_per_class ：某一个类别是由几个cluster构成的</span><span class="token comment" spellcheck="true">#训练数据和测试数据</span>X_train<span class="token punctuation">,</span>X_test<span class="token punctuation">,</span> y_train<span class="token punctuation">,</span> y_test <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>test_size<span class="token operator">=</span><span class="token number">0.2</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#正例和反例</span>positive_x1 <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token keyword">if</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span>positive_x2 <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token keyword">if</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span>negetive_x1 <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token keyword">if</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span>negetive_x2 <span class="token operator">=</span> <span class="token punctuation">[</span>x<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token keyword">if</span> y<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">#定义感知机</span>clf <span class="token operator">=</span> Perceptron<span class="token punctuation">(</span>fit_intercept<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#使用训练数据进行训练</span>clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>X_train<span class="token punctuation">,</span>y_train<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#得到训练结果，权重矩阵</span><span class="token keyword">print</span><span class="token punctuation">(</span>clf<span class="token punctuation">.</span>coef_<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#输出为：[[1.71768691 3.53606653]]</span><span class="token comment" spellcheck="true">#超平面的截距，此处输出为：[0.]</span><span class="token keyword">print</span><span class="token punctuation">(</span>clf<span class="token punctuation">.</span>intercept_<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#利用测试数据进行验证</span>acc <span class="token operator">=</span> clf<span class="token punctuation">.</span>score<span class="token punctuation">(</span>X_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>acc<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#画出正例和反例的散点图</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>positive_x1<span class="token punctuation">,</span>positive_x2<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'red'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>scatter<span class="token punctuation">(</span>negetive_x1<span class="token punctuation">,</span>negetive_x2<span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token string">'blue'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#画出超平面（在本例中即是一条直线）</span>line_x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>line_y <span class="token operator">=</span> line_x <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">-</span>clf<span class="token punctuation">.</span>coef_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">/</span> clf<span class="token punctuation">.</span>coef_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> clf<span class="token punctuation">.</span>intercept_plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>line_x<span class="token punctuation">,</span>line_y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://upload-images.jianshu.io/upload_images/19407955-88497a24ecda3fdf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 感知机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>灰度预测</title>
      <link href="/2020/06/06/j-hui-du-yu-ce-chu-ren-zhi/"/>
      <url>/2020/06/06/j-hui-du-yu-ce-chu-ren-zhi/</url>
      
        <content type="html"><![CDATA[<p>来源:<a href="https://blog.csdn.net/wuli_dear_wang/article/details/80587650" target="_blank" rel="noopener">灰度预测</a></p><h5 id="1-灰色系统的定义："><a href="#1-灰色系统的定义：" class="headerlink" title="1.灰色系统的定义："></a>1.灰色系统的定义：</h5><p>灰色系统指既含有已知信息又含有未知信息的系统。</p><h5 id="2-灰色预测模型的定义："><a href="#2-灰色预测模型的定义：" class="headerlink" title="2.灰色预测模型的定义："></a>2.灰色预测模型的定义：</h5><p>对灰色系统进行预测的模型。<br>灰色模型（Grey Model，简称GM模型）一般表达方式为GM（n,x）模型，其含义是：用n阶微分方程对x个变量建立模型。</p><h5 id="3-灰色预测模型的目的："><a href="#3-灰色预测模型的目的：" class="headerlink" title="3.灰色预测模型的目的："></a>3.灰色预测模型的目的：</h5><p>通过把分散在时间轴上的离散数据看成一组连续变化的序列，采用累加和累减的方式，将灰色系统中的未知因素弱化，强化已知因素的影响程度，最后构建一个以时间为变量的连续微分方程，通过数学方法确定方程中的参数，从而实现预测目的。</p><h5 id="4-灰色系统预测模型的特点："><a href="#4-灰色系统预测模型的特点：" class="headerlink" title="4.灰色系统预测模型的特点："></a>4.灰色系统预测模型的特点：</h5><p>无需大量数据样本，短期预测效果好，运算过程简单。</p><h5 id="5-灰色系统预测模型的不足："><a href="#5-灰色系统预测模型的不足：" class="headerlink" title="5.灰色系统预测模型的不足："></a>5.灰色系统预测模型的不足：</h5><p>对非线性数据样本预测效果差。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> statistic </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>支持向量机SVM</title>
      <link href="/2020/06/06/j-zhi-chi-xiang-liang-ji-svm/"/>
      <url>/2020/06/06/j-zhi-chi-xiang-liang-ji-svm/</url>
      
        <content type="html"><![CDATA[<p>#<a href="https://www.jianshu.com/p/3e1d318b76aa" target="_blank" rel="noopener">返回目录</a></p><hr><h3 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a><a href="https://www.pkudodo.com/2018/12/16/1-8/" target="_blank" rel="noopener">支持向量机</a></h3><ul><li>目录<ul><li>模型介绍 </li><li>梯度下降法原理和代码</li><li>sklearn实现</li></ul></li></ul><hr><hr><h6 id="模型介绍"><a href="#模型介绍" class="headerlink" title="模型介绍"></a>模型介绍</h6><p> <a href="https://scikit-learn.org/stable/modules/svm.html#svm" target="_blank" rel="noopener">支持向量机</a></p><blockquote><p>摘录:</p><ol><li>实际上SVM找到的仍然不是一个最优的超平面，但一定在最优附近，本文的最优是相对于感知机、逻辑斯蒂等算法而言.</li><li>超平面可以使得与它最近的样本点的距离必须大于其他所有超平面划分时与最近的样本点的距离。在SVM当中这叫间隔最大化。</li><li>SVM解决线性不可分的过程，但它并不是逐渐升维的，而是直接上升到无穷维。</li><li>我们去找具体是第几维这种过程太复杂了，事实上我们的维度只需要大于等于N维就可以了,使得其必定可以线性可分。</li></ol></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/19407955-b7eb98604d47bf46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工程小知识</title>
      <link href="/2020/06/06/j-gong-cheng-xiao-zhi-shi/"/>
      <url>/2020/06/06/j-gong-cheng-xiao-zhi-shi/</url>
      
        <content type="html"><![CDATA[<h4 id="main-loop"><a href="#main-loop" class="headerlink" title="main loop"></a><a href="https://zhuanlan.zhihu.com/p/28130949" target="_blank" rel="noopener">main loop</a></h4><p>把主循环(main loop)简单的谈一下。GUI应用程序都是事件驱动的。比如键盘事件、鼠标事件等等。还有一些事件来自于系统内部，比如定时事件、其它文件事件等等。在没有任何事件的情况下，应用程序处于睡眠状态。这种事件驱动机制，GUI应用程序都需要一个主循环(main loop)。主循环(main loop)控制应用程序什么时候进入睡眠状态，什么时候被唤醒。所以主循环(main loop)就是干这个的。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> project </category>
          
      </categories>
      
      
        <tags>
            
            <tag> loop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Camelyon Challenge:癌症细胞区域检测_数据预处理_ASAP</title>
      <link href="/2020/06/06/j-camelyon-challenge-yan-zheng-xi-bao-qu-yu-jian-ce-shu-ju-yu-chu-li-asap/"/>
      <url>/2020/06/06/j-camelyon-challenge-yan-zheng-xi-bao-qu-yu-jian-ce-shu-ju-yu-chu-li-asap/</url>
      
        <content type="html"><![CDATA[<hr><h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul><li>数据集</li><li>软件</li><li>处理数据集</li></ul><hr><p>####数据集<br>从官方网站,获取<a href="https://camelyon17.grand-challenge.org/Data/" target="_blank" rel="noopener">数据集</a>,国内可以选择<a href="https://pan.baidu.com/s/1mIzSewImtEisclPtTHGSyw#list/path=%2F" target="_blank" rel="noopener">百度网盘</a></p><p>####软件<br>获取软件<a href="https://github.com/computationalpathologygroup/ASAP/releases" target="_blank" rel="noopener">ASAP</a><br>本文基于ubuntu系统,所以下载deb文件,双击安装后,然后拷贝根目录下/opt/ASAP到自己建立的操作目录下.便于我们在python代码中调用.</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> syssys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"ASAP/bin"</span><span class="token punctuation">)</span><span class="token keyword">import</span> multiresolutionimageinterface <span class="token keyword">as</span> mir</code></pre><p><img src="https://upload-images.jianshu.io/upload_images/19407955-9c82dd9bb992b151.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>####处理数据集</p><blockquote><p>结果图</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/19407955-210b5bc7886771e0.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>所需准备</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/19407955-9d42c34ac1a2632d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">import</span> json<span class="token keyword">import</span> xmltodict<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> cv2<span class="token keyword">import</span> syssys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">"ASAP/bin"</span><span class="token punctuation">)</span><span class="token keyword">import</span> multiresolutionimageinterface <span class="token keyword">as</span> mir<span class="token keyword">def</span> <span class="token function">read_rol_to_dist</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    save <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'annotation.json'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>save<span class="token punctuation">)</span><span class="token punctuation">:</span>        f_a <span class="token operator">=</span> <span class="token string">"lesion_annotations"</span>        folder <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> f_a<span class="token punctuation">)</span>        f_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>folder<span class="token punctuation">)</span>        annotation <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> f_list<span class="token punctuation">:</span>            name <span class="token operator">=</span> i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            t <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>folder<span class="token punctuation">,</span> i<span class="token punctuation">)</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                xml <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            xmlparse <span class="token operator">=</span> xmltodict<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>xml<span class="token punctuation">)</span>            jsonstr <span class="token operator">=</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>xmlparse<span class="token punctuation">,</span>indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>            data <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>jsonstr<span class="token punctuation">)</span>            judge <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">"ASAP_Annotations"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"Annotations"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"Annotation"</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> type<span class="token punctuation">(</span>judge<span class="token punctuation">)</span> <span class="token operator">==</span> type<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                d<span class="token punctuation">[</span>judge<span class="token punctuation">[</span><span class="token string">'@Name'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> judge<span class="token punctuation">[</span><span class="token string">'Coordinates'</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> judge<span class="token punctuation">:</span>                    d<span class="token punctuation">[</span>j<span class="token punctuation">[</span><span class="token string">'@Name'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> j<span class="token punctuation">[</span><span class="token string">'Coordinates'</span><span class="token punctuation">]</span>            annotation<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> d        <span class="token keyword">with</span> open<span class="token punctuation">(</span>save<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>annotation<span class="token punctuation">,</span> f<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>save<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> ff<span class="token punctuation">:</span>        json_data <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>ff<span class="token punctuation">)</span>    <span class="token keyword">return</span> json_data<span class="token keyword">def</span> <span class="token function">need_folder</span><span class="token punctuation">(</span>f_p<span class="token punctuation">,</span> f_i<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>f_p<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"请解压缩在:{} 中"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>f_p<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>f_i<span class="token punctuation">)</span><span class="token punctuation">:</span>        os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>f_i<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">create_store</span><span class="token punctuation">(</span>f_p<span class="token punctuation">,</span> f_i<span class="token punctuation">)</span><span class="token punctuation">:</span>    f_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>f_p<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> f_list<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">"."</span> <span class="token keyword">in</span> i<span class="token punctuation">:</span>            <span class="token keyword">pass</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            t <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>f_i<span class="token punctuation">,</span> i<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">:</span>                os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">img_have</span><span class="token punctuation">(</span>f_p<span class="token punctuation">,</span> f_i<span class="token punctuation">)</span><span class="token punctuation">:</span>    f_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>f_p<span class="token punctuation">)</span>    haved_img <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> patient <span class="token keyword">in</span> f_list<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">"."</span> <span class="token operator">not</span> <span class="token keyword">in</span> patient<span class="token punctuation">:</span>            path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>f_p<span class="token punctuation">,</span> patient<span class="token punctuation">)</span>            patient_img_list <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>path<span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> patient_img_list<span class="token punctuation">:</span>                haved_img<span class="token punctuation">[</span>i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> i<span class="token punctuation">)</span>    <span class="token keyword">return</span> haved_img<span class="token keyword">def</span> <span class="token function">handle_c</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    f_csv <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"stage_labels.csv"</span><span class="token punctuation">)</span>    classify <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>f_csv<span class="token punctuation">)</span>    _ <span class="token operator">=</span> list<span class="token punctuation">(</span>classify<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token string">'patient'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    patient <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> _ <span class="token punctuation">:</span>        patient<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    stage <span class="token operator">=</span> list<span class="token punctuation">(</span>classify<span class="token punctuation">.</span>loc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token string">'stage'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    r_c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>patient<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        r_c<span class="token punctuation">[</span>patient<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> stage<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> r_c<span class="token keyword">def</span> <span class="token function">calculate_border</span><span class="token punctuation">(</span>coordinate<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    c_list <span class="token operator">=</span> coordinate<span class="token punctuation">[</span><span class="token string">"Coordinate"</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> type<span class="token punctuation">(</span>c_list<span class="token punctuation">)</span> <span class="token operator">==</span> type<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"存在医生误点,一个标记只有一个坐标"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>c_list<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> c_list<span class="token punctuation">:</span>            x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>float<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token string">"@X"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>float<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token string">"@Y"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        bbox <span class="token operator">=</span> <span class="token punctuation">[</span>min<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> min<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span> bbox<span class="token punctuation">,</span> x <span class="token punctuation">,</span> y <span class="token keyword">def</span> <span class="token function">calculate_left_top</span><span class="token punctuation">(</span>bbox<span class="token punctuation">,</span> extend<span class="token punctuation">)</span><span class="token punctuation">:</span>    width <span class="token operator">=</span> bbox<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> bbox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    height <span class="token operator">=</span> bbox<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">-</span> bbox<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    left_top <span class="token operator">=</span> <span class="token punctuation">(</span>bbox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bbox<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>    l_f <span class="token operator">=</span> <span class="token punctuation">(</span>left_top<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token punctuation">(</span>extend<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> left_top<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token punctuation">(</span>extend<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    w <span class="token operator">=</span> width <span class="token operator">+</span>extend    h <span class="token operator">=</span> height <span class="token operator">+</span> extend    l <span class="token operator">=</span> max<span class="token punctuation">(</span>w<span class="token punctuation">,</span> h<span class="token punctuation">)</span>    e_p <span class="token operator">=</span>  <span class="token punctuation">[</span>l_f<span class="token punctuation">,</span> l<span class="token punctuation">]</span>    <span class="token keyword">return</span> e_p<span class="token keyword">def</span> <span class="token function">relative_coordinate</span><span class="token punctuation">(</span>bbox<span class="token punctuation">,</span> x_c_list<span class="token punctuation">,</span> y_c_list<span class="token punctuation">,</span> extend<span class="token punctuation">)</span><span class="token punctuation">:</span>    origin <span class="token operator">=</span> <span class="token punctuation">(</span>bbox<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bbox<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>    relative_x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    relative_y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">assert</span> len<span class="token punctuation">(</span>relative_x<span class="token punctuation">)</span> <span class="token operator">==</span> len<span class="token punctuation">(</span>relative_y<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>x_c_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        relative_x<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x_c_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>origin<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> extend<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>        relative_y<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y_c_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>origin<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> extend<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>    d2_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>relative_x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> <span class="token punctuation">[</span>relative_x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> relative_y<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        d2_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token keyword">return</span> d2_list<span class="token keyword">def</span> <span class="token function">img_save</span><span class="token punctuation">(</span>image_patch<span class="token punctuation">,</span> haved_img<span class="token punctuation">,</span> node_key<span class="token punctuation">,</span> num<span class="token punctuation">,</span> f_p<span class="token punctuation">,</span> f_i<span class="token punctuation">,</span> classify<span class="token punctuation">,</span> source_img<span class="token punctuation">)</span><span class="token punctuation">:</span>    stage <span class="token operator">=</span> classify<span class="token punctuation">[</span>node_key<span class="token punctuation">]</span>    i_p <span class="token operator">=</span> haved_img<span class="token punctuation">[</span>node_key<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> source_img <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        save_name <span class="token operator">=</span> node_key <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> stage <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">".jpg"</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        save_name <span class="token operator">=</span> node_key <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> stage <span class="token operator">+</span> <span class="token string">"__"</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">".jpg"</span>    save_p <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>f_i<span class="token punctuation">,</span> i_p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> save_name<span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>save_p<span class="token punctuation">,</span> image_patch<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">json_save</span><span class="token punctuation">(</span>d2_list<span class="token punctuation">,</span> haved_img<span class="token punctuation">,</span> node_key<span class="token punctuation">,</span> num<span class="token punctuation">,</span> f_p<span class="token punctuation">,</span> f_i<span class="token punctuation">,</span> classify<span class="token punctuation">)</span><span class="token punctuation">:</span>    stage <span class="token operator">=</span> classify<span class="token punctuation">[</span>node_key<span class="token punctuation">]</span>    i_p <span class="token operator">=</span> haved_img<span class="token punctuation">[</span>node_key<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>    save_name <span class="token operator">=</span> node_key <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> stage <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> num <span class="token operator">+</span> <span class="token string">".json"</span>    save_p <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>f_i<span class="token punctuation">,</span> i_p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> save_name<span class="token punctuation">)</span>    d <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"coordinate"</span><span class="token punctuation">:</span>d2_list<span class="token punctuation">}</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>save_p<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>d<span class="token punctuation">,</span> f<span class="token punctuation">,</span> indent<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">operate</span><span class="token punctuation">(</span>f_p<span class="token punctuation">,</span> f_i<span class="token punctuation">,</span> node_key<span class="token punctuation">,</span> num<span class="token punctuation">,</span> coordinate<span class="token punctuation">,</span> haved_img<span class="token punctuation">,</span> classify<span class="token punctuation">)</span><span class="token punctuation">:</span>    img_name <span class="token operator">=</span> haved_img<span class="token punctuation">[</span>node_key<span class="token punctuation">]</span>    reader <span class="token operator">=</span> mir<span class="token punctuation">.</span>MultiResolutionImageReader<span class="token punctuation">(</span><span class="token punctuation">)</span>    mr_image <span class="token operator">=</span> reader<span class="token punctuation">.</span>open<span class="token punctuation">(</span>img_name<span class="token punctuation">)</span>    level <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment" spellcheck="true">#倒金字塔型图片, level=0 为最大</span>    ds <span class="token operator">=</span> mr_image<span class="token punctuation">.</span>getLevelDownsample<span class="token punctuation">(</span>level<span class="token punctuation">)</span>    judge<span class="token punctuation">,</span> bbox<span class="token punctuation">,</span> x_c_list<span class="token punctuation">,</span> y_c_list <span class="token operator">=</span> calculate_border<span class="token punctuation">(</span>coordinate<span class="token punctuation">)</span>    <span class="token keyword">if</span> judge <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        extend <span class="token operator">=</span> <span class="token number">100</span>        position <span class="token operator">=</span> calculate_left_top<span class="token punctuation">(</span>bbox<span class="token punctuation">,</span> extend<span class="token punctuation">)</span>        source_img <span class="token operator">=</span> <span class="token number">1</span>        image_patch <span class="token operator">=</span> mr_image<span class="token punctuation">.</span>getUCharPatch<span class="token punctuation">(</span>int<span class="token punctuation">(</span>position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span> ds<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span> ds<span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> level<span class="token punctuation">)</span>        img_save<span class="token punctuation">(</span>image_patch<span class="token punctuation">,</span> haved_img<span class="token punctuation">,</span> node_key<span class="token punctuation">,</span> num<span class="token punctuation">,</span> f_p<span class="token punctuation">,</span> f_i<span class="token punctuation">,</span> classify<span class="token punctuation">,</span> source_img<span class="token punctuation">)</span>        d2_list <span class="token operator">=</span> relative_coordinate<span class="token punctuation">(</span>bbox<span class="token punctuation">,</span> x_c_list<span class="token punctuation">,</span> y_c_list<span class="token punctuation">,</span> extend<span class="token punctuation">)</span>        json_save<span class="token punctuation">(</span>d2_list<span class="token punctuation">,</span> haved_img<span class="token punctuation">,</span> node_key<span class="token punctuation">,</span> num<span class="token punctuation">,</span> f_p<span class="token punctuation">,</span> f_i<span class="token punctuation">,</span> classify<span class="token punctuation">)</span>        points<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>d2_list<span class="token punctuation">,</span>np<span class="token punctuation">.</span>int32<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#多边形的顶点坐标</span>        cv2<span class="token punctuation">.</span>polylines<span class="token punctuation">(</span>image_patch<span class="token punctuation">,</span><span class="token punctuation">[</span>points<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token boolean">True</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span>thickness <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#画任意多边形</span>        source_img <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment" spellcheck="true"># cv2.imshow("1", image_patch)</span>        <span class="token comment" spellcheck="true"># cv2.waitKey(0)  </span>        img_save<span class="token punctuation">(</span>image_patch<span class="token punctuation">,</span> haved_img<span class="token punctuation">,</span> node_key<span class="token punctuation">,</span> num<span class="token punctuation">,</span> f_p<span class="token punctuation">,</span> f_i<span class="token punctuation">,</span> classify<span class="token punctuation">,</span> source_img<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">generate_img</span><span class="token punctuation">(</span>haved_img<span class="token punctuation">,</span> annotation<span class="token punctuation">,</span> f_p<span class="token punctuation">,</span> f_i<span class="token punctuation">,</span> classify<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> node_key <span class="token keyword">in</span> haved_img<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            judge <span class="token operator">=</span> annotation<span class="token punctuation">[</span>node_key<span class="token punctuation">]</span>        <span class="token keyword">except</span> KeyError<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> per_img <span class="token keyword">in</span> judge<span class="token punctuation">:</span>                num <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>r<span class="token string">'\D'</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> per_img<span class="token punctuation">)</span>                coordinate <span class="token operator">=</span> judge<span class="token punctuation">[</span>per_img<span class="token punctuation">]</span>                operate<span class="token punctuation">(</span>f_p<span class="token punctuation">,</span> f_i<span class="token punctuation">,</span> node_key<span class="token punctuation">,</span> num<span class="token punctuation">,</span> coordinate<span class="token punctuation">,</span> haved_img<span class="token punctuation">,</span> classify<span class="token punctuation">)</span><span class="token keyword">def</span>  <span class="token function">cut_img</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> annotation<span class="token punctuation">)</span><span class="token punctuation">:</span>    f_p <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"patient"</span><span class="token punctuation">)</span>    f_i <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">"image"</span><span class="token punctuation">)</span>    need_folder<span class="token punctuation">(</span>f_p<span class="token punctuation">,</span> f_i<span class="token punctuation">)</span>    create_store<span class="token punctuation">(</span>f_p<span class="token punctuation">,</span> f_i<span class="token punctuation">)</span>    haved_img <span class="token operator">=</span> img_have<span class="token punctuation">(</span>f_p<span class="token punctuation">,</span> f_i<span class="token punctuation">)</span>    classify <span class="token operator">=</span> handle_c<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    generate_img<span class="token punctuation">(</span>haved_img<span class="token punctuation">,</span> annotation<span class="token punctuation">,</span> f_p<span class="token punctuation">,</span> f_i<span class="token punctuation">,</span> classify<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    path <span class="token operator">=</span> <span class="token string">"17"</span>    annotation <span class="token operator">=</span> read_rol_to_dist<span class="token punctuation">(</span>path<span class="token punctuation">)</span>    cut_img<span class="token punctuation">(</span>path<span class="token punctuation">,</span> annotation<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"完成skr~skr~"</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Big Data </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《统计学习方法》李航老师</title>
      <link href="/2020/06/06/j-xiao-lan-shu-tong-ji-xue-xi-fang-fa-zong-ru-kou/"/>
      <url>/2020/06/06/j-xiao-lan-shu-tong-ji-xue-xi-fang-fa-zong-ru-kou/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>理论学习:<br>  学习博客: <a href="https://www.pkudodo.com/" target="_blank" rel="noopener">Dodo</a><br>  作者Github: <a href="https://github.com/Dod-o/Statistical-Learning-Method_Code" target="_blank" rel="noopener">算法</a></li><li>调包快速实现:<br>  工具: <a href="https://scikit-learn.org/stable/index.html" target="_blank" rel="noopener">scikit-learn</a></li><li>兴趣才是学习动力<br>  可视化:<a href="https://scikit-learn.org/stable/auto_examples/index.html" target="_blank" rel="noopener">机器学习</a></li></ul><hr><h1 id="札记"><a href="#札记" class="headerlink" title="札记"></a>札记</h1><ul><li><a href="https://www.jianshu.com/p/90ea2181b2ac" target="_blank" rel="noopener">感知机 (perceptron)</a><ul><li>随机梯度下降</li></ul></li><li><a href="https://www.jianshu.com/p/6d9f50273fbc" target="_blank" rel="noopener">逻辑斯蒂 (logistics)</a><ul><li>条件概率模型</li></ul></li><li><a href="https://www.jianshu.com/p/f0dff76bfce5" target="_blank" rel="noopener">支持向量机 (SVM)</a><ul><li>最优超平面</li></ul></li><li><a href="https://www.jianshu.com/p/a4724339f911" target="_blank" rel="noopener">K近邻原理</a><ul><li>另一种分类方法</li></ul></li></ul><hr><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Machine Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 统计学习方法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些想法</title>
      <link href="/2020/04/27/2020-04-27-flags/"/>
      <url>/2020/04/27/2020-04-27-flags/</url>
      
        <content type="html"><![CDATA[<ol><li>建立经贸动物保护教育社区<br> 社区功能：社团活动记录，社团历史，招新，注册登录，评论，推荐老师模块，快速导航：教务系统，学校主页</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Flags </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ffmpeg常用命令</title>
      <link href="/2020/04/26/2020-04-26-ffmpeg-chang-yong-ming-ling/"/>
      <url>/2020/04/26/2020-04-26-ffmpeg-chang-yong-ming-ling/</url>
      
        <content type="html"><![CDATA[<h3 id="ffmpeg常用命令"><a href="#ffmpeg常用命令" class="headerlink" title="ffmpeg常用命令"></a>ffmpeg常用命令</h3><h5 id="1-抽取全部帧"><a href="#1-抽取全部帧" class="headerlink" title="1. 抽取全部帧"></a>1. 抽取全部帧</h5><blockquote><p>ffmpeg -i 1.mp4 -q:v 2 -f image2 images/%08d.jpg</p></blockquote><h5 id="2-抽取I帧"><a href="#2-抽取I帧" class="headerlink" title="2. 抽取I帧"></a>2. 抽取I帧</h5><blockquote><p>ffmpeg -i 1.mp4 -vf “select=eq(pict_type,I)”  -vsync vfr -qscale:v 2 -f image2 images/%08d.jpg</p></blockquote><h5 id="3-抽取P帧"><a href="#3-抽取P帧" class="headerlink" title="3. 抽取P帧"></a>3. 抽取P帧</h5><blockquote><p>ffmpeg -i 1.mp4 -vf “select=eq(pict_type,P)”  -vsync vfr -qscale:v 2 -f image2 images/%08d.jpg</p></blockquote><h5 id="4-抽取B帧"><a href="#4-抽取B帧" class="headerlink" title="4. 抽取B帧"></a>4. 抽取B帧</h5><blockquote><p>ffmpeg -i 1.mp4 -vf “select=eq(pict_type,B)”  -vsync vfr -qscale:v 2 -f image2 images/%08d.jpg</p></blockquote><h5 id="5-视频场景转换帧"><a href="#5-视频场景转换帧" class="headerlink" title="5. 视频场景转换帧"></a>5. 视频场景转换帧</h5><blockquote><p>ffmpeg -i 1.mp4 -filter:v “select=’gt(scene,0.1)’,showinfo” -f null - 2&gt;&amp;1<br>// 其中0.1表示帧为新场景的概率</p></blockquote><h5 id="6-均匀抽帧-r-指定抽取的帧率，即从视频中每秒钟抽取图片的数量。1代表每秒抽取一帧。"><a href="#6-均匀抽帧-r-指定抽取的帧率，即从视频中每秒钟抽取图片的数量。1代表每秒抽取一帧。" class="headerlink" title="6. 均匀抽帧 -r 指定抽取的帧率，即从视频中每秒钟抽取图片的数量。1代表每秒抽取一帧。"></a>6. 均匀抽帧 -r 指定抽取的帧率，即从视频中每秒钟抽取图片的数量。1代表每秒抽取一帧。</h5><blockquote><p>ffmpeg -i 1.mp4 -r 1 -q:v 2 -f image2 images/%08d.jpg</p></blockquote><h5 id="7-抽取指定时间帧"><a href="#7-抽取指定时间帧" class="headerlink" title="7. 抽取指定时间帧"></a>7. 抽取指定时间帧</h5><blockquote><p>ffmpeg -ss 00:00:30 -i 1.mp4 -vframes 1 0.jpg<br>// 耗时0.07s<br>ffmpeg -i 1.mp4 -ss 00:00:30  -vframes 1 0.jpg<br>// 耗时0.68s</p></blockquote><h5 id="8-图片合成视频"><a href="#8-图片合成视频" class="headerlink" title="8. 图片合成视频"></a>8. 图片合成视频</h5><blockquote><p>ffmpeg  -threads 1 -y -r 25 -i ./%08d.jpg -s 640x480 -vcodec libx264  output.mp4</p></blockquote><h5 id="9-切视频"><a href="#9-切视频" class="headerlink" title="9. 切视频"></a>9. 切视频</h5><blockquote><p>ffmpeg  -i 815.mp4 -vcodec copy -acodec copy -ss 00:01:00 -to 00:04:10 output1.mp4 -y</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具包 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ffmpeg </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue写组件流程</title>
      <link href="/2020/04/26/2020-04-26-vue-xie-zu-jian-liu-cheng/"/>
      <url>/2020/04/26/2020-04-26-vue-xie-zu-jian-liu-cheng/</url>
      
        <content type="html"><![CDATA[<h3 id="vue写组件流程"><a href="#vue写组件流程" class="headerlink" title="vue写组件流程"></a>vue写组件流程</h3><h4 id="一-下载框架"><a href="#一-下载框架" class="headerlink" title="(一) 下载框架"></a>(一) 下载框架</h4><blockquote><p>可以github上下载一个通用应用框架，比如<a href="https://github.com/PanJiaChen/vue-element-admin" target="_blank" rel="noopener">vue-element-admin</a>、<a href="https://github.com/bailicangdu/vue2-elm" target="_blank" rel="noopener">vue2-elm</a>等大型应用，或者 <a href="https://www.vuepress.cn" target="_blank" rel="noopener">VuePress</a> Vue 驱动的静态网站生成器上手一下。</p></blockquote><h4 id="二-修改路由"><a href="#二-修改路由" class="headerlink" title="(二) 修改路由"></a>(二) 修改路由</h4><blockquote><p>以<a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/router/index.js" target="_blank" rel="noopener">vue-element-admin的路由</a>为例，使之能转跳我们想写的页面。<a href="https://panjiachen.gitee.io/vue-element-admin-site/zh/guide/essentials/router-and-nav.html" target="_blank" rel="noopener">教程</a></p></blockquote><h4 id="三-设计组件"><a href="#三-设计组件" class="headerlink" title="(三) 设计组件"></a>(三) 设计组件</h4><blockquote><p>参照<a href="https://element.eleme.cn/#/zh-CN/component/layout" target="_blank" rel="noopener">Element UI</a> 设计好布局，继而设计组件。</p></blockquote><h5 id="1-先想好页面data，需要数据是什么样的"><a href="#1-先想好页面data，需要数据是什么样的" class="headerlink" title="1. 先想好页面data，需要数据是什么样的"></a>1. 先想好页面data，需要数据是什么样的</h5><h5 id="2-编辑下面代码脚手架"><a href="#2-编辑下面代码脚手架" class="headerlink" title="2. 编辑下面代码脚手架"></a>2. 编辑下面代码脚手架</h5><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>template<span class="token operator">></span>    <span class="token operator">&lt;</span>div <span class="token operator">></span>                                                                                          <span class="token comment" spellcheck="true">//  vue模板只允许有一个div</span>        <span class="token operator">&lt;</span>el<span class="token operator">-</span>container<span class="token operator">></span>            <span class="token operator">&lt;</span>el<span class="token operator">-</span>main<span class="token operator">></span>                <span class="token operator">&lt;</span>leftList <span class="token operator">/</span><span class="token operator">></span>                <span class="token operator">&lt;</span>rightShow <span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>main<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>el<span class="token operator">-</span>container<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>template<span class="token operator">></span><span class="token operator">&lt;</span>script<span class="token operator">></span>    <span class="token keyword">import</span> <span class="token punctuation">{</span> mapGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span>                               <span class="token comment" spellcheck="true">//  类似python的导入import，模块化</span>    <span class="token keyword">import</span> Pagination <span class="token keyword">from</span> <span class="token string">'@/全局组件/分页栏'</span>    <span class="token keyword">import</span> leftList <span class="token keyword">from</span> <span class="token string">'./内部组件/左侧列表'</span>               <span class="token comment" spellcheck="true">//  引入其他组件，</span>    <span class="token keyword">import</span> rightShow <span class="token keyword">from</span> <span class="token string">'./内部组件/右侧显示'</span>        <span class="token comment" spellcheck="true">//  引入其他组件，</span>    <span class="token keyword">import</span> <span class="token punctuation">{</span> getFace <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'../内部接口/file'</span>                  <span class="token comment" spellcheck="true">// 引入方法</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'module_name'</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>                                                                   <span class="token comment" spellcheck="true">//组件上方标签可用 &lt;leftList /></span>            leftList<span class="token punctuation">,</span>               rightShow<span class="token punctuation">,</span>            Pagination        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                                                                                   <span class="token comment" spellcheck="true">//  MVVM 架构，前端数据</span>            <span class="token keyword">return</span> <span class="token punctuation">{</span>                    data<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                                                                          <span class="token comment" spellcheck="true">// 注意是冒号定义，并非等号</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        props<span class="token punctuation">:</span><span class="token punctuation">{</span>                                                                                   <span class="token comment" spellcheck="true">//  property 单词：财产、属性      </span>            father2child<span class="token punctuation">:</span><span class="token punctuation">{</span>type<span class="token punctuation">:</span>Array<span class="token punctuation">,</span>required<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span>              <span class="token comment" spellcheck="true">//   父传子,赋属性</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                                                                             <span class="token comment" spellcheck="true">//   初始化组件的方法</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        watch<span class="token punctuation">:</span><span class="token punctuation">{</span>                                                                                  <span class="token comment" spellcheck="true">//   watch 坚持变量变动的方法</span>            <span class="token function">data</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//方法</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token function">get_lib_list</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">getLib</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>           <span class="token comment" spellcheck="true">//  requess.then方法 ,  异步保证页面流畅不卡  </span>                    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">get_zero</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">//单词 response :承诺（网络请求承诺返回,后刷新数据流,导致渲染页面）</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">//方法</span>            <span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">,</span>value<span class="token punctuation">)</span>                                     <span class="token comment" spellcheck="true">//   子传父,更状态,父：@done="函数方法", 承接状态。</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span>style<span class="token operator">></span>                                                                                          <span class="token comment" spellcheck="true">/* 样式 */</span>    <span class="token punctuation">.</span>bottom <span class="token punctuation">{</span>        margin<span class="token operator">-</span>top<span class="token punctuation">:</span> 13px<span class="token punctuation">;</span>        line<span class="token operator">-</span>height<span class="token punctuation">:</span> 12px<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">></span></code></pre><h5 id="3-根据自己所需填充相应逻辑"><a href="#3-根据自己所需填充相应逻辑" class="headerlink" title="3. 根据自己所需填充相应逻辑"></a>3. 根据自己所需填充相应逻辑</h5><h4 id="四-注意"><a href="#四-注意" class="headerlink" title="(四) 注意"></a>(四) 注意</h4><blockquote><p>1-var，let，const定义区别及实例 <a href="https://blog.csdn.net/qq_42612810/article/details/88864548" target="_blank" rel="noopener">js变量定义的区别</a> (全局作用域和函数作用域、块级作用域。var  不出花括号)</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue组件 </tag>
            
            <tag> Element UI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ToolKit</title>
      <link href="/2020/04/06/2020-04-06-toolkit/"/>
      <url>/2020/04/06/2020-04-06-toolkit/</url>
      
        <content type="html"><![CDATA[<p><img src="https://pandao.github.io/editor.md/images/logos/editormd-logo-180x180.png" alt=""></p><h1 id="常用工具超链接"><a href="#常用工具超链接" class="headerlink" title="常用工具超链接"></a>常用工具超链接</h1><p><a href="https://www.jiandaoyun.com/r/5b95200de22eed486e92ac63" target="_blank" rel="noopener">电子书</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 工具包 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ToolKit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试文章</title>
      <link href="/2020/04/06/2020-04-06-ce-shi-wen-zhang/"/>
      <url>/2020/04/06/2020-04-06-ce-shi-wen-zhang/</url>
      
        <content type="html"><![CDATA[<ul><li>1、<a href="###1、王强老师在北京大学演讲">王强老师在北京大学演讲</a></li><li>2、<a href="###2、《中国合伙人》摘抄">《中国合伙人》摘抄</a></li><li>3、<a href="###3、《读书毁了我》摘抄">《读书毁了我》摘抄</a><ul><li>3.1、<a href="####3.1、力量是文字的意义">力量是文字的意义</a></li></ul></li></ul><p>###1、王强老师在北京大学演讲<br><a href="https://www.bilibili.com/video/av8652059?from=search&amp;seid=15974226546575964339" target="_blank" rel="noopener" title="演讲链接">演讲链接</a></p><blockquote><p>人啊，当你不知道要做什么事情，当你做的事情不能带给社会意义的时候，当你做的事情的意义不能给别人生命产生共鸣的时候，你的存在实际上是被人忽略的。<br>北大给了一个东西，就是怎么样塑造你生命的东西。对知识的渴望饥饿，超过了性本身。北大氛围超越世俗吸引力的东西更伟大的东西，那就是对知识的诉求。<br>读经典、读那些能够改变我们生命轨迹的那些书籍，成了北大人最后离开校门走到世界，不管你走到哪个领域，最后能够走的比别人稍微远一点的，我觉得唯一的逻辑保证。因为那些书，它不是字，它也是生命，而且这些生命比起你自己生命来说，它是能引领你的生命，他是能型塑你的生命。</p></blockquote><ul><li>两种书<ul><li>inform的书</li><li>form的书</li></ul></li></ul><blockquote><p>毁——就像北京人说的：拿盘泥，一团一团，一团泥没型逐渐成型了，它就成了崭新的一个东西——如果用在这个意义上，毁，他就必须能够彻底摧毁你的旧我、过去的我、狭隘封闭的我，然后诞生一个崭新的、开阔的、阳光般的我，那读书就全部有了意义。这也就是当年北大为什么那些人天天想到的不是世俗的追求，但是到了世俗里一看，稍微一动，他就得到了所谓世俗追求的东西呢？我觉得这就是北大给了我们——型塑的能力，吸取信息的能力，分析问题能力的全部的东西。</p></blockquote><blockquote><p>要读书只读一流的书，做人只做一流的人。</p></blockquote><blockquote><p>读书，为什么读经典它能够改变我们呢？那么文学的功能是什么呢？在我看文学的功能，就像我在序里说的东西。如果一个真正有力量的文字，它一定是能够对我们的审美产生奇异的再造，它对我们对于真的追求有奇异的启示，它对我们对善的追求有如饥似渴的那种充电的感觉，所以我们对于人类最高的价值：真的、善的和美的，它就会变成我们的血液。这一代人的personality（个性）有了这三个东西的话，你在社会上走向现实中，你就不会轻易的被世俗的、所谓流行的价值、暂时的价值，甚至非常糟糕的价值轻易扭转了。</p></blockquote><blockquote><p>真的、善的、美的，一定是从那些流传在人类时间长河里，那些没被淘汰的文字存在的。那么你如果不断不断的在这样的文字中熏陶的时候，当你离开这些文字的时候，这些文字就变成了你的世界，所以从单词word到world中间只差一个字母，这个字母就是L，这个字母L就是Language。也就是说，这就是文字阅读和真正人生世界的完全最简单的逻辑关系。如果你读到的不是真文字，你遇到的不是真语言，你最后见到的一定是虚幻的世界，不是真实的世界。那这就是为什么读书，它真的要对你产生作用，会产生什么呢？他一定要和你真正的生命融汇在一起，而且几千百年来在人类时间长河中没被淘汰的一些著作真正才是。因为一代一代人如果都这么选择的话，你一定要相信人类的选择，而不是市场的选择，更不是广告词的选择，所以这是非常关键的。</p></blockquote><blockquote><p>他写的是小河和他村庄的关系，我觉得实际上是典型的我心目中的文字怎么和你生命世界瓜葛在一的东西，他必须对你生命产生极强的冲击，这书才值得读，或者你才真正领悟了这本书。</p></blockquote><p><a href="https://www.jianshu.com/p/c1076652f07c" target="_blank" rel="noopener">《小河与村庄》</a></p><pre class=" language-诗"><code class="language-诗">《小河与村庄》(葡萄牙)佩索阿塔古思河美过我村庄的那条小河，但是塔古思河又美不过流经我村庄的小河，因为塔古思河它不是流经我村庄的小河。</code></pre><blockquote><p>文字，如果他不属于你的村庄，他不能够流穿你的灵魂，这个书是不值得一读的，而真正传统的经典它是有穿透生命力的这种力量，所以我说读书只读一种书。</p></blockquote><pre><code>举例《古文观止》、（孺子可教）、（刻苦努力）老师知道怎么样给学生重要的价值，怎么样英文（知识）走进你的生命。灵格风英语，BBC经典英语教材。[Repeat] one lesson (离开了文字的课文，但这些东西全在身上。)中国史放在世界史的框架里。某某运动时，亚洲在在干什么，欧洲在干什么，全世界在干什么。社会主义，各尽所能按劳分配。共产主义，各尽所能各取所需。（自己决定你需要什么，你拿什么。）管理者，大多为文科生，鲜有技术官僚。技术官僚看到局部，文学看到全部，甚至看到没有存在的东西。学文应该比学理的更加聪明。你的中文已经达到了自学成才的程度，你将来要想毙掉所有中文系学生，你只要比他们多学一门语言吧。多一种语言，你的世界更会宽广一下。历史你要读懂，你要站在一个什么样的高度。徐迟的报告文学《哥德巴赫猜想》、王元《数论》、华罗庚的论著、报告文学李赋宁先生、朱光潜老师</code></pre><blockquote><p>要想走进这个领域，我必须站在最高的地方，当时至少最优秀的地方，我才能够一览众山小。这应该是读书方法。</p></blockquote><p><a href="http://blog.sina.com.cn/s/blog_9cd925490102x6ki.html" target="_blank" rel="noopener">王强个人经历</a><br><a href="http://finance.sina.com.cn/money/fund/fundzmt/2019-12-10/doc-iihnzahi6436053.shtml" target="_blank" rel="noopener">格林深瞳的经历</a></p><p>###2、《中国合伙人》摘抄</p><p>###3、《读书毁了我》摘抄</p><p><em>一个恋书狂关于书世界的漫游奇境记。</em></p><p>####3.1、力量是文字的意义</p><p><strong>文字必然蕴含着“摧毁一切”的力量</strong></p><blockquote><p>“反乌托邦”代表作家之一，《我们》的作者扎米亚京说过：“有些书具有炸药一样的化学结构。唯一不同的是，一块炸药只爆炸一次，而一本书则爆炸上千次。”说得一针见血。真的，我坚信文字只可能呈现出两种存在——“有力量”存在和“没有力量”存在。</p></blockquote><blockquote><p>“有力量的文字”必然蕴含着“摧毁一切”的能量，无论这能量试图摧毁的目标是“感知的愚钝”，是“诘问的苍白”，是“想象的匮乏”，是“思想的偏狭”，是“道德的伪善”，还是“自我的陈旧、呆滞、局限”。套用辞世不久的古代哲学史大家、发过的阿杜(Pierre Handot)先生的话，“有力量的文字”只在“型塑”(to form)而不是“告知”(to inform)。它们必得不断摧毁“昨天的”我，甚至“今天的”我，才可能型塑出那个完全不同的“明天的”我。然而，时间长河里，面对人类越积越多的文字垃圾，“有力量的文字”竟显得那样“珍稀”(rare)。</p></blockquote><blockquote><p>“有力量的文字”本该就是“珍稀”的。唯其“珍稀”，它们才是唯一值得你用全部生命去拥抱的，因为它们毫不留情“毁”了你的同时，还给你的必是崭新的生命。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/04/hello-world/"/>
      <url>/2020/04/04/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
